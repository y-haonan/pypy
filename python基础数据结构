身份运算符
is 和 is not
is是判断两个标识符是不是引用同一个对象。


成员运算符
in 和 not in


字符串、列表、元组、字典

	1. 字符串

 单引号 或者 双引号 中的数据都是字符串。

输出使用print( )
输入用input( ) ,注意python中 input获取的数据，都以字符串的方式进行保存，即使输入的是数字，也是以字符串方式保存。


	1. 切片

字符串、列表、元组都支持切片操作。

切片的语法： [起始:结束:步长]
注意：选取的区间属于左闭右开型，即包含起始位，但不包含结束位本身。

   name = 'abcdef'
  print(name[0:3]) # 取 下标0~2 的字符
  “abc”
注意：特殊用法
-1表示的是最后一位
最后一位或者第一位可以省略
步长为-的表示从后面开始

[2:] 取下标为2开始到结束
[:] 整个字符串
[::-1]表示反转


a= 'abcdefg'
print(a[:])
abcdefg
print(a[::-1])
gfedcba
print(a[5:1:-1])
fedc


3.字符串常见操作
如有字符串mystr = 'hello world'，以下是常见的操作

	1. 

mystr = 'hello world itcast and itcastcpp'
print(mystr.find("hel")) #检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-1
print(mystr.index('a')) #跟find()方法一样，只不过如果str不在 mystr中会报一个异常.
print(mystr.count('a')) #返回 str在start和end之间 在 mystr里面出现的次数
print(mystr.replace('a','A')) #把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.

print(mystr.split("a",2)) #以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串

print(mystr.capitalize())#把字符串的第一个字符大写

print(mystr.title()) #把字符串的每个单词首字母大写

print(mystr.startswith("h"))#检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False

print(mystr.endswith("h")) #检查字符串是否以obj结束，如果是返回True,否则返回 False.

print(mystr.lower()) #转换 mystr 中所有大写字符为小写
print(mystr.upper()) #转换 mystr 中的小写字母为大写

print(mystr.ljust(100)) #返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串





列表：
 比C语言的数组强大的地方在于列表中的元素可以是不同类型的

列表的循环遍历
1.使用for循环
    namesList = ['xiaoWang','xiaoZhang','xiaoHua']
    for name in namesList:
        print(name)
2.使用while循环
为了更有效率的输出列表的每个数据，可以使用循环来完成
    namesList = ['xiaoWang','xiaoZhang','xiaoHua']
    length = len(namesList)
    i = 0
    while i<length:
        print(namesList[i])
        i+=1
3.列表的相关操作
  #定义变量A，默认有3个元素
    a = ['xiaoWang','xiaoZhang','xiaoHua']
列表中存放的数据是可以进行修改的，比如"增"、"删"、"改""
<1>添加元素("增"append, extend, insert)
a.append("xiaoA") #通过append可以向列表追加元素
a.extend(["xiaoB","xiaoC"])  #通过extend可以将另一个集合中的元素逐一添加到列表中
a.insert(0,"HH")#insert(index, object) 在指定位置index前插入元素object


<2>修改元素("改")
修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改
  a[1] = 'xiaoLu'

<3>查找元素("查"in, not in, index, count)
python中查找的常用方法为：

- in（存在）,如果存在那么结果为true，否则为false
- not in（不存在），如果不存在那么结果为true，否则false
print(a.index('xiaoHua')) #找到这个元素的索引，并返回
print(a.count('HH')) #计数 返回此元素的数量

<4>删除元素("删"del, pop, remove)
- del：根据下标进行删除
- pop：删除最后一个元素
- remove：根据元素的值进行删除

del a[0] #删除第一个元素

print(a.pop()) #默认删掉最后一个元素，可以指定想要删除的索引
print(a.pop(0))

print(a.remove("xiaoA")) #根据值来删除元素

<5>排序(sort, reverse)
sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。
reverse方法是将list逆置。

a = [1, 4, 2, 3]
a.reverse() #逆置 [3, 2, 4, 1]
a.sort() #排序 [1, 2, 3, 4]
a.sort(reverse=True) #倒序 [4, 3, 2, 1]


元组
python的元组就是不可变列表。 元组的元素不能修改。元组使用小括号，列表使用方括号。
元组的内置函数count, index

a=('a','b','c','a','b')
print(a.index('a'))
print(a.count('a'))



字典

info = {'name': '班长', 'id': 100, 'sex': 'f', 'address': '地球亚洲中国北京'}

'''说明：
字典和列表一样，也能够存储多个数据
列表中找某个元素时，是根据下标进行的
字典中找某个元素时，是根据'名字'（就是冒号:前面的那个值，例如上面代码中的'name'、'id'、'sex'）
字典的每个元素由2部分组成，键:值。例如 'name':'班长' ,'name'为键，'班长'为值'''

print(info['name']) #根据键访问值

#在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值：
ret=info.get('age',19)
print(ret)



字典的常见操作1

1.修改元素
info['id'] = 200

2.增加元素
如果在使用 变量名['键'] = 数据 时，这个“键”在字典中，不存在，那么就会新增这个元素

3.删除元素
del
clear()

del  删除指定的元素
del info['name']

del info  删除整个字典

info.clear() #清空整个字典


字典的常见操作2
dict = {"name":"zhangsan","sex":'m'}
print(len(dict))  #测量字典中，键值对的个数
print(dict.keys()) #字典里所有的key
print(dict.values())#字典里所有的值
print(dict.items()) #字典所有项


字典的遍历

通过for ... in ...:的语法结构，我们可以遍历字符串、列表、元组、字典等数据结构。

#author:yangxin
a_str = "hello itcast"
for char in a_str:
    print(char,end='')

a_list=[1,2,3,4,5,6]
for num in a_list:
    print(num,end='')

a_tuple = (1,2,3,4,5)
for num in a_tuple:
    print(num,end='-')

dict={'name':'yx','sex':'m'}
for key in dict.keys():
    print(key)

for value in dict.values():
    print(value)

for item in dict.items():
    print(item)

for key,value in dict.items():
    print(key,':',value)

i=0
for char in dict:
    print(i,char)
    i+=1

for i,char in enumerate(char):  #带索引的遍历
    print(i,char)




可变类型与不可变类型可变类型，值可以改变：

	* 列表 list
	* 字典 dict

不可变类型，值不可以改变：

	* 数值类型 int, long, bool, float
	* 字符串 str
	* 元组 tuple



